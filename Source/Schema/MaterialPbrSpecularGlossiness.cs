//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/// <summary>
/// NOTE: This will eventually move to the C# loader
/// </summary>
namespace glTFLoader.Schema
{
    using System.Linq;
    using System.Runtime.Serialization;


    public class MaterialPbrSpecularGlossiness
    {

        /// <summary>
        /// Backing field for DiffuseFactor.
        /// </summary>
        private float[] m_diffuseFactor = new float[] {
                1F,
                1F,
                1F,
                1F};

        /// <summary>
        /// Backing field for DiffuseTexture.
        /// </summary>
        private TextureInfo m_diffuseTexture;

        /// <summary>
        /// Backing field for SpecularFactor.
        /// </summary>
        private float[] m_specularFactor = new float[] {
                1F,
                1F,
                1F};

        /// <summary>
        /// Backing field for GlossinessFactor.
        /// </summary>
        private float m_glossinessFactor = 1F;

        /// <summary>
        /// Backing field for SpecularGlossinessTexture.
        /// </summary>
        private TextureInfo m_specularGlossinessTexture;

        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;

        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;

        /// <summary>
        /// The reflected diffuse factor of the material.
        /// </summary>
        [Newtonsoft.Json.JsonConverterAttribute(typeof(glTFLoader.Shared.ArrayConverter))]
        [Newtonsoft.Json.JsonPropertyAttribute("diffuseFactor")]
        public float[] DiffuseFactor
        {
            get
            {
                return this.m_diffuseFactor;
            }
            set
            {
                if ((value.Length < 4u))
                {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 4u))
                {
                    throw new System.ArgumentException("Array too long");
                }
                int index = 0;
                for (index = 0; (index < value.Length); index = (index + 1))
                {
                    if ((value[index] < 0D))
                    {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                for (index = 0; (index < value.Length); index = (index + 1))
                {
                    if ((value[index] > 1D))
                    {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this.m_diffuseFactor = value;
            }
        }

        /// <summary>
        /// The diffuse texture.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("diffuseTexture")]
        public TextureInfo DiffuseTexture
        {
            get
            {
                return this.m_diffuseTexture;
            }
            set
            {
                this.m_diffuseTexture = value;
            }
        }

        /// <summary>
        /// The specular RGB color of the material.
        /// </summary>
        [Newtonsoft.Json.JsonConverterAttribute(typeof(glTFLoader.Shared.ArrayConverter))]
        [Newtonsoft.Json.JsonPropertyAttribute("specularFactor")]
        public float[] SpecularFactor
        {
            get
            {
                return this.m_specularFactor;
            }
            set
            {
                if ((value.Length < 3u))
                {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 3u))
                {
                    throw new System.ArgumentException("Array too long");
                }
                int index = 0;
                for (index = 0; (index < value.Length); index = (index + 1))
                {
                    if ((value[index] < 0D))
                    {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                for (index = 0; (index < value.Length); index = (index + 1))
                {
                    if ((value[index] > 1D))
                    {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this.m_specularFactor = value;
            }
        }

        /// <summary>
        /// The glossiness or smoothness of the material.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("glossinessFactor")]
        public float GlossinessFactor
        {
            get
            {
                return this.m_glossinessFactor;
            }
            set
            {
                if ((value < 0D))
                {
                    throw new System.ArgumentOutOfRangeException("GlossinessFactor", value, "Expected value to be greater than or equal to 0");
                }
                if ((value > 1D))
                {
                    throw new System.ArgumentOutOfRangeException("GlossinessFactor", value, "Expected value to be less than or equal to 1");
                }
                this.m_glossinessFactor = value;
            }
        }

        /// <summary>
        /// The specular-glossiness texture.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("specularGlossinessTexture")]
        public TextureInfo SpecularGlossinessTexture
        {
            get
            {
                return this.m_specularGlossinessTexture;
            }
            set
            {
                this.m_specularGlossinessTexture = value;
            }
        }

        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions
        {
            get
            {
                return this.m_extensions;
            }
            set
            {
                this.m_extensions = value;
            }
        }

        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public Extras Extras
        {
            get
            {
                return this.m_extras;
            }
            set
            {
                this.m_extras = value;
            }
        }

        public bool ShouldSerializeDiffuseFactor()
        {
            return (m_diffuseFactor.SequenceEqual(new float[] {
                        1F,
                        1F,
                        1F,
                        1F}) == false);
        }

        public bool ShouldSerializeDiffuseTexture()
        {
            return ((m_diffuseTexture == null)
                        == false);
        }

        public bool ShouldSerializeSpecularFactor()
        {
            return (m_specularFactor.SequenceEqual(new float[] {
                        1F,
                        1F,
                        1F}) == false);
        }

        public bool ShouldSerializeGlossinessFactor()
        {
            return ((m_glossinessFactor == 1F)
                        == false);
        }

        public bool ShouldSerializeSpecularGlossinessTexture()
        {
            return ((m_specularGlossinessTexture == null)
                        == false);
        }

        public bool ShouldSerializeExtensions()
        {
            return ((m_extensions == null)
                        == false);
        }

        public bool ShouldSerializeExtras()
        {
            return ((m_extras == null)
                        == false);
        }
    }
}
